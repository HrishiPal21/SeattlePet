{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "PetLicensesADF"
		},
		"LS_BLOB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_BLOB'"
		},
		"LS_SNOWFLAKE_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_SNOWFLAKE'"
		},
		"LS_SNOWFLAKE_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "PETS_DB"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MASTER_PIPELINE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_CSV_to_Parquet",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_CSV_to_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_Prod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_parquet_out_v2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Prod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_parquet_out_v2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_CSV_to_Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_parquet_out_v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_CSV_to_Parquet')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Prod')]",
				"[concat(variables('factoryId'), '/pipelines/PL_parquet_out_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CSV_to_Parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_csv_to_parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License Issue Date",
											"type": "String"
										},
										"sink": {
											"name": "LICENSE_ISSUE_DATE"
										}
									},
									{
										"source": {
											"name": "License Number",
											"type": "String"
										},
										"sink": {
											"name": "LICENSE_NUMBER"
										}
									},
									{
										"source": {
											"name": "Animal's Name",
											"type": "String"
										},
										"sink": {
											"name": "ANIMAL_NAME"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String"
										},
										"sink": {
											"name": "SPECIES"
										}
									},
									{
										"source": {
											"name": "Primary Breed",
											"type": "String"
										},
										"sink": {
											"name": "PRIMARY_BREED"
										}
									},
									{
										"source": {
											"name": "Secondary Breed",
											"type": "String"
										},
										"sink": {
											"name": "SECONDARY_BREED"
										}
									},
									{
										"source": {
											"name": "ZIP Code",
											"type": "String"
										},
										"sink": {
											"name": "ZIP_CODE"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Licenses_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Licenses_Parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "copy_excel_to_parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "zipcode",
											"type": "String"
										},
										"sink": {
											"name": "ZIP_CODE"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "CITY_NAME"
										}
									},
									{
										"source": {
											"name": "state_abbr",
											"type": "String"
										},
										"sink": {
											"name": "STATE_CODE"
										}
									},
									{
										"source": {
											"name": "county",
											"type": "String"
										},
										"sink": {
											"name": "COUNTY_NAME"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Geo_XLSX",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Geo_Parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-16T01:18:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Licenses_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_Licenses_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/DS_Geo_XLSX')]",
				"[concat(variables('factoryId'), '/datasets/DS_Geo_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Parquet_to_Stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_pet_licenses",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SNOWFLAKE",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE SCHEMA PETS_DB.DW;\n\nTRUNCATE TABLE STG_SEATTLE_PET_LICENSE;\n\nCOPY INTO STG_SEATTLE_PET_LICENSE (\n    LICENSE_ISSUE_DATE,\n    LICENSE_NUMBER,\n    ANIMAL_NAME,\n    SPECIES,\n    PRIMARY_BREED,\n    SECONDARY_BREED,\n    ZIP_CODE\n)\nFROM (\n    SELECT \n        TRY_TO_DATE($1:LICENSE_ISSUE_DATE::VARCHAR),\n        $1:LICENSE_NUMBER::VARCHAR,\n        $1:ANIMAL_NAME::VARCHAR,\n        $1:SPECIES::VARCHAR,\n        $1:PRIMARY_BREED::VARCHAR,\n        $1:SECONDARY_BREED::VARCHAR,\n        $1:ZIP_CODE::VARCHAR\n    FROM @azure_parquet_stage/seattle_pet_licenses.parquet\n)\nFILE_FORMAT = (TYPE = PARQUET)\nON_ERROR = 'CONTINUE';\n\nSELECT COUNT(*) AS rows_loaded FROM STG_SEATTLE_PET_LICENSE;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "load_location_data",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_pet_licenses",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SNOWFLAKE",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "USE SCHEMA PETS_DB.DW;\n\nTRUNCATE TABLE STG_LOCATION_ZIP_CITY;\n\nCOPY INTO STG_LOCATION_ZIP_CITY\nFROM @azure_parquet_stage/geo_data.parquet\nFILE_FORMAT = (TYPE = PARQUET)\nMATCH_BY_COLUMN_NAME = CASE_INSENSITIVE\nON_ERROR = 'CONTINUE';\n\nSELECT COUNT(*) AS rows_loaded FROM STG_LOCATION_ZIP_CITY;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Prod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Species_to_PROD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Species_to_PROD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"species": {},
									"prodSpecies": {},
									"prodspeciessink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Breed_to_PROD",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_Species_to_PROD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Breed_to_PROD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"breed": {},
									"ProdSpecies": {},
									"ProdBreed": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Stage_to_PROD",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_Breed_to_PROD",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DF_Loc_to_PROD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Stage_to_PROD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageLicense": {},
									"breed": {},
									"breed2": {},
									"prodLocationSRC": {},
									"prodspecies": {},
									"prodLicenseFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Loc_to_PROD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Loc_to_PROD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Species_to_PROD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Breed_to_PROD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Stage_to_PROD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Loc_to_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_parquet_out_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_parquet_to_stage_v2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_parquet_to_stage_v2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_parquet_to_stage_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Geo_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "geo_data.parquet",
						"folderPath": "parquet",
						"container": "pet-licenses"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Geo_XLSX')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "in",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "geo-data.xlsx",
						"container": "pet-licenses"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "state_fips",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "state_abbr",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Licenses_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Seattle_Pet_Licenses_20251015.csv",
						"container": "pet-licenses"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "License Issue Date",
						"type": "String"
					},
					{
						"name": "License Number",
						"type": "String"
					},
					{
						"name": "Animal's Name",
						"type": "String"
					},
					{
						"name": "Species",
						"type": "String"
					},
					{
						"name": "Primary Breed",
						"type": "String"
					},
					{
						"name": "Secondary Breed",
						"type": "String"
					},
					{
						"name": "ZIP Code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Licenses_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "seattle_pet_licenses.parquet",
						"folderPath": "parquet",
						"container": "pet-licenses"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Stage_Licenses_SF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LICENSE_ISSUE_DATE",
						"type": "DATE",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "LICENSE_NUMBER",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ANIMAL_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "SPECIES",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "PRIMARY_BREED",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "SECONDARY_BREED",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "STG_SEATTLE_PET_LICENSE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Stage_Location_SF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "CITY_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "STATE_CODE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "COUNTY_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "STG_LOCATION_ZIP_CITY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_BREED')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "BREED_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "SPECIES_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "BREED_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "BREED_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_DATE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "DATE_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "FULL_DATE",
						"type": "DATE",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "DAY_OF_MONTH",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "MONTH",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "MONTH_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "QUARTER",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "YEAR",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "DATE_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_LICENSE_FACT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LICENSE_ISSUE_DATE_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "LOCATION_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "SPECIES_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "PRIMARY_BREED_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "SECONDARY_BREED_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "LICENSE_NUMBER",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "LICENSE_CNT",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "PETLICENSE_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_LOCATION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LOCATION_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "CITY_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "STATE_CODE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "COUNTY_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_SPECIES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SNOWFLAKE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "SPECIES_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "SPECIES_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "SPECIES_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_BLOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_BLOB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SNOWFLAKE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "USSFJOQ-PQA19153",
					"user": "ADF_USER",
					"database": "[parameters('LS_SNOWFLAKE_properties_typeProperties_database')]",
					"warehouse": "COMPUTE_WH",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_SNOWFLAKE_password')]"
					}
				},
				"version": "1.1"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Breed_to_PROD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Licenses_SF",
								"type": "DatasetReference"
							},
							"name": "breed"
						},
						{
							"dataset": {
								"referenceName": "PROD_SPECIES",
								"type": "DatasetReference"
							},
							"name": "ProdSpecies"
						},
						{
							"dataset": {
								"referenceName": "PROD_BREED",
								"type": "DatasetReference"
							},
							"name": "ProdBreed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PROD_BREED",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "primary"
						},
						{
							"name": "secondary"
						},
						{
							"name": "union"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "exists1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> breed",
						"source(output(",
						"          SPECIES_KEY as decimal(38,0),",
						"          SPECIES_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> ProdSpecies",
						"source(output(",
						"          BREED_KEY as decimal(38,0),",
						"          SPECIES_KEY as decimal(38,0),",
						"          BREED_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> ProdBreed",
						"breed select(mapColumn(",
						"          SPECIES,",
						"          BREED = PRIMARY_BREED",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> primary",
						"breed select(mapColumn(",
						"          SPECIES,",
						"          BREED = SECONDARY_BREED",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> secondary",
						"primary, secondary union(byName: true)~> union",
						"union aggregate(groupBy(SPECIES,",
						"          BREED),",
						"     CT = count(BREED)) ~> aggregate1",
						"derivedColumn1, ProdSpecies join(SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, ProdBreed exists(ProdSpecies@SPECIES_KEY == ProdBreed@SPECIES_KEY",
						"     && BREED == BREED_NAME,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"aggregate1 derive(BREED = iifNull(BREED, \"UNKNOWN\"),",
						"          SPECIES = iifNull(SPECIES, \"UNKNOWN\")) ~> derivedColumn1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_KEY as decimal(38,0),",
						"          SPECIES_KEY as decimal(38,0),",
						"          BREED_NAME as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          SPECIES_KEY,",
						"          BREED_NAME = BREED",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Licenses_SF')]",
				"[concat(variables('factoryId'), '/datasets/PROD_SPECIES')]",
				"[concat(variables('factoryId'), '/datasets/PROD_BREED')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Loc_to_PROD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Location_SF",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PROD_LOCATION",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ZIP_CODE as string,",
						"          CITY_NAME as string,",
						"          STATE_CODE as string,",
						"          COUNTY_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_KEY as decimal(38,0),",
						"          CITY_NAME as string,",
						"          STATE_CODE as string,",
						"          COUNTY_NAME as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Location_SF')]",
				"[concat(variables('factoryId'), '/datasets/PROD_LOCATION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Parquet_to_Stage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Licenses_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceLicenses"
						},
						{
							"dataset": {
								"referenceName": "DS_Geo_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceLocation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Licenses_SF",
								"type": "DatasetReference"
							},
							"name": "SinkLicenses"
						},
						{
							"dataset": {
								"referenceName": "DS_Stage_Location_SF",
								"type": "DatasetReference"
							},
							"name": "SinkLocation"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceLicenses",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceLocation",
						"SourceLicenses sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> SinkLicenses",
						"SourceLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ZIP_CODE as string,",
						"          CITY_NAME as string,",
						"          STATE_CODE as string,",
						"          COUNTY_NAME as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> SinkLocation"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Licenses_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/DS_Geo_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Licenses_SF')]",
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Location_SF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Species_to_PROD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Licenses_SF",
								"type": "DatasetReference"
							},
							"name": "species"
						},
						{
							"dataset": {
								"referenceName": "PROD_SPECIES",
								"type": "DatasetReference"
							},
							"name": "prodSpecies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PROD_SPECIES",
								"type": "DatasetReference"
							},
							"name": "prodspeciessink"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "exists1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> species",
						"source(output(",
						"          SPECIES_KEY as decimal(38,0),",
						"          SPECIES_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> prodSpecies",
						"select1 aggregate(groupBy(SPECIES),",
						"     dummy = count(LICENSE_NUMBER)) ~> aggregate1",
						"species, prodSpecies exists(SPECIES == SPECIES_NAME,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"derivedColumn1 select(mapColumn(",
						"          LICENSE_ISSUE_DATE,",
						"          LICENSE_NUMBER,",
						"          ANIMAL_NAME,",
						"          SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          ZIP_CODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"exists1 derive(SPECIES = iifNull(SPECIES, \"UNKNOWN\")) ~> derivedColumn1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SPECIES_KEY as decimal(38,0),",
						"          SPECIES_NAME as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          SPECIES_NAME = SPECIES",
						"     )) ~> prodspeciessink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Licenses_SF')]",
				"[concat(variables('factoryId'), '/datasets/PROD_SPECIES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Stage_to_PROD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Licenses_SF",
								"type": "DatasetReference"
							},
							"name": "stageLicense"
						},
						{
							"dataset": {
								"referenceName": "PROD_BREED",
								"type": "DatasetReference"
							},
							"name": "breed"
						},
						{
							"dataset": {
								"referenceName": "PROD_BREED",
								"type": "DatasetReference"
							},
							"name": "breed2"
						},
						{
							"dataset": {
								"referenceName": "PROD_LOCATION",
								"type": "DatasetReference"
							},
							"name": "prodLocationSRC"
						},
						{
							"dataset": {
								"referenceName": "PROD_SPECIES",
								"type": "DatasetReference"
							},
							"name": "prodspecies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PROD_LICENSE_FACT",
								"type": "DatasetReference"
							},
							"name": "prodLicenseFact"
						}
					],
					"transformations": [
						{
							"name": "ColumnTransformer",
							"description": "autobots roll out"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> stageLicense",
						"source(output(",
						"          BREED_KEY as decimal(38,0),",
						"          SPECIES_KEY as decimal(38,0),",
						"          BREED_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> breed",
						"source(output(",
						"          BREED_KEY as decimal(38,0),",
						"          SPECIES_KEY as decimal(38,0),",
						"          BREED_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> breed2",
						"source(output(",
						"          LOCATION_KEY as decimal(38,0),",
						"          CITY_NAME as string,",
						"          STATE_CODE as string,",
						"          COUNTY_NAME as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> prodLocationSRC",
						"source(output(",
						"          SPECIES_KEY as decimal(38,0),",
						"          SPECIES_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> prodspecies",
						"join2 derive(DATE_KEY = toInteger(toString(LICENSE_ISSUE_DATE, 'yyyymmdd'))) ~> ColumnTransformer",
						"derivedColumn1, prodLocationSRC join(stageLicense@ZIP_CODE == prodLocationSRC@ZIP_CODE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join3, breed2 join(SECONDARY_BREED == breed2@BREED_NAME",
						"     && prodspecies@SPECIES_KEY == breed2@SPECIES_KEY,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join4, breed join(PRIMARY_BREED == BREED_NAME",
						"     && prodspecies@SPECIES_KEY == breed@SPECIES_KEY,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join1, prodspecies join(SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"stageLicense derive(SPECIES = iifNull(SPECIES, \"UNKNOWN\"),",
						"          PRIMARY_BREED = iifNull(PRIMARY_BREED, \"UNKNOWN\"),",
						"          SECONDARY_BREED = iifNull(SECONDARY_BREED, \"UNKNOWN\")) ~> derivedColumn1",
						"ColumnTransformer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE_KEY as decimal(38,0),",
						"          LOCATION_KEY as decimal(38,0),",
						"          SPECIES_KEY as decimal(38,0),",
						"          PRIMARY_BREED_KEY as decimal(38,0),",
						"          SECONDARY_BREED_KEY as decimal(38,0),",
						"          LICENSE_NUMBER as string,",
						"          LICENSE_CNT as decimal(10,0)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_ISSUE_DATE_KEY = DATE_KEY,",
						"          LOCATION_KEY,",
						"          SPECIES_KEY,",
						"          PRIMARY_BREED_KEY = breed@BREED_KEY,",
						"          SECONDARY_BREED_KEY = breed2@BREED_KEY,",
						"          LICENSE_NUMBER",
						"     )) ~> prodLicenseFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Licenses_SF')]",
				"[concat(variables('factoryId'), '/datasets/PROD_BREED')]",
				"[concat(variables('factoryId'), '/datasets/PROD_LOCATION')]",
				"[concat(variables('factoryId'), '/datasets/PROD_SPECIES')]",
				"[concat(variables('factoryId'), '/datasets/PROD_LICENSE_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_parquet_to_stage_v2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Licenses_Parquet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Stage_Licenses_SF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "transformers"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(ISSUE_DATE_DT = toDate(LICENSE_ISSUE_DATE, 'MMMM dd, yyyy')) ~> transformers",
						"transformers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_ISSUE_DATE = ISSUE_DATE_DT,",
						"          LICENSE_NUMBER,",
						"          ANIMAL_NAME,",
						"          SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          ZIP_CODE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Licenses_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/DS_Stage_Licenses_SF')]"
			]
		}
	]
}