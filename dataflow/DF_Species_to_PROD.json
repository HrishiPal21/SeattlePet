{
	"name": "DF_Species_to_PROD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Stage_Licenses_SF",
						"type": "DatasetReference"
					},
					"name": "species"
				},
				{
					"dataset": {
						"referenceName": "PROD_SPECIES",
						"type": "DatasetReference"
					},
					"name": "prodSpecies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PROD_SPECIES",
						"type": "DatasetReference"
					},
					"name": "prodspeciessink"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> species",
				"source(output(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> prodSpecies",
				"select1 aggregate(groupBy(SPECIES),",
				"     dummy = count(LICENSE_NUMBER)) ~> aggregate1",
				"species, prodSpecies exists(SPECIES == SPECIES_NAME,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"derivedColumn1 select(mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          LICENSE_NUMBER,",
				"          ANIMAL_NAME,",
				"          SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          ZIP_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"exists1 derive(SPECIES = iifNull(SPECIES, \"UNKNOWN\")) ~> derivedColumn1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SPECIES_NAME = SPECIES",
				"     )) ~> prodspeciessink"
			]
		}
	}
}