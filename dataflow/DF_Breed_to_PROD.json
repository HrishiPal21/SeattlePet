{
	"name": "DF_Breed_to_PROD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Stage_Licenses_SF",
						"type": "DatasetReference"
					},
					"name": "breed"
				},
				{
					"dataset": {
						"referenceName": "PROD_SPECIES",
						"type": "DatasetReference"
					},
					"name": "ProdSpecies"
				},
				{
					"dataset": {
						"referenceName": "PROD_BREED",
						"type": "DatasetReference"
					},
					"name": "ProdBreed"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "primary"
				},
				{
					"name": "secondary"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> breed",
				"source(output(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ProdSpecies",
				"source(output(",
				"          BREED_KEY as decimal(38,0),",
				"          SPECIES_KEY as decimal(38,0),",
				"          BREED_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ProdBreed",
				"breed select(mapColumn(",
				"          SPECIES,",
				"          BREED = PRIMARY_BREED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> primary",
				"breed select(mapColumn(",
				"          SPECIES,",
				"          BREED = SECONDARY_BREED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> secondary"
			]
		}
	}
}