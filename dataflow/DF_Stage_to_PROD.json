{
	"name": "DF_Stage_to_PROD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Stage_Licenses_SF",
						"type": "DatasetReference"
					},
					"name": "stageLicense"
				},
				{
					"dataset": {
						"referenceName": "PROD_BREED",
						"type": "DatasetReference"
					},
					"name": "breed"
				},
				{
					"dataset": {
						"referenceName": "PROD_BREED",
						"type": "DatasetReference"
					},
					"name": "breed2"
				},
				{
					"dataset": {
						"referenceName": "PROD_LOCATION",
						"type": "DatasetReference"
					},
					"name": "prodLocationSRC"
				},
				{
					"dataset": {
						"referenceName": "PROD_SPECIES",
						"type": "DatasetReference"
					},
					"name": "prodspecies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PROD_LICENSE_FACT",
						"type": "DatasetReference"
					},
					"name": "prodLicenseFact"
				}
			],
			"transformations": [
				{
					"name": "ColumnTransformer",
					"description": "autobots roll out"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> stageLicense",
				"source(output(",
				"          BREED_KEY as decimal(38,0),",
				"          SPECIES_KEY as decimal(38,0),",
				"          BREED_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> breed",
				"source(output(",
				"          BREED_KEY as decimal(38,0),",
				"          SPECIES_KEY as decimal(38,0),",
				"          BREED_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> breed2",
				"source(output(",
				"          LOCATION_KEY as decimal(38,0),",
				"          CITY_NAME as string,",
				"          STATE_CODE as string,",
				"          COUNTY_NAME as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> prodLocationSRC",
				"source(output(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> prodspecies",
				"join2 derive(DATE_KEY = toInteger(toString(LICENSE_ISSUE_DATE, 'yyyymmdd'))) ~> ColumnTransformer",
				"derivedColumn1, prodLocationSRC join(stageLicense@ZIP_CODE == prodLocationSRC@ZIP_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join3, breed2 join(stageLicense@SECONDARY_BREED == breed2@BREED_NAME",
				"     && prodspecies@SPECIES_KEY == breed2@SPECIES_KEY,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join4, breed join(stageLicense@PRIMARY_BREED == BREED_NAME",
				"     && prodspecies@SPECIES_KEY == breed@SPECIES_KEY,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join1, prodspecies join(SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"stageLicense derive(SPECIES = iifNull(SPECIES, \"UNKNOWN\"),",
				"          PRIMARY_BREED = iifNull(PRIMARY_BREED, \"UNKNOWN\"),",
				"          SECONDARY_BREED = iifNull(SECONDARY_BREED, \"UNKNOWN\")) ~> derivedColumn1",
				"ColumnTransformer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LICENSE_ISSUE_DATE_KEY as decimal(38,0),",
				"          LOCATION_KEY as decimal(38,0),",
				"          SPECIES_KEY as decimal(38,0),",
				"          PRIMARY_BREED_KEY as decimal(38,0),",
				"          SECONDARY_BREED_KEY as decimal(38,0),",
				"          LICENSE_NUMBER as string,",
				"          LICENSE_CNT as decimal(10,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LICENSE_ISSUE_DATE_KEY = DATE_KEY,",
				"          LOCATION_KEY,",
				"          SPECIES_KEY,",
				"          PRIMARY_BREED_KEY = breed@BREED_KEY,",
				"          SECONDARY_BREED_KEY = breed2@BREED_KEY,",
				"          LICENSE_NUMBER",
				"     )) ~> prodLicenseFact"
			]
		}
	}
}